= PGroonga

: subtitle
   Make PostgreSQL\nfast full text search platform\nfor all languages!
: author
   Kouhei Sutou
: institution
   ClearCode Inc.
: content-source
   PGConf.ASIA 2016
: date
   2016-12-03
: allotted-time
   45m
: theme
   .

= PostgreSQL and me\n(('note:PostgreSQLと私'))

Some my patches are merged\n
(('note:いくつかパッチがマージされている'))

= Patches\n(('note:パッチ'))

  * (('wait'))BUG #13840: pg_dump generates unloadable SQL\n
    (('note:pg_dumpがリストアできないSQLを出力する'))
  * (('wait'))BUG #14160: DROP ACCESS METHOD IF EXISTS isn't impl.\n
    (('note:DROP ACCESS METHOD IF EXISTSが実装されていない'))

(('wait'))
(('tag:center'))
They are found while developing PGroonga\n
(('note:どちらもPGroonga開発中に見つけた問題'))

= PGroonga dev style\n(('note:PGroongaの開発スタイル'))

  * When there are problems in related projects including PostgreSQL\n
    (('note:PostgreSQLを含む関連プロジェクトに問題があった場合'))
    * (('wait'))We fix these problems in these projects 
      instead of choosing workaround in PGroonga\n
      (('note:PGroonga側で回避するのではなく'))\n
      (('note:関連プロジェクトの方で問題を直す'))

= PostgreSQL and FTS\n(('note:PostgreSQLと全文検索'))

  * PostgreSQL has out-of-the-box full text search feature\n
    (('note:PostgreSQLには組込の全文検索機能がある'))\n
    * (('wait'))It has some problems...\n
      (('note:ただ、いくつか問題がある'))
    * (('wait'))We fixed them by PGroonga\n
      (('note:PGroongaを開発することでそれらの問題を修正した'))
    * (('wait'))instead of fixing PostgreSQL 😓\n
      (('note:PostgreSQLを修正するのではなくて…'))

= Because...\n(('note:理由は…'))

  (1) (('wait'))Our approach is different from PostgreSQL's approach\n
      (('note:PGroongaのやり方はPostgreSQLのやり方と違う'))
  (2) (('wait'))PG provides plugin system\n
      (('note:PostgreSQLはプラグインの仕組みを提供している'))
      * Implementing as a plugin is PostgreSQL way!\n
        (('note:プラグインでの実装はPostgreSQLらしいやり方！'))

= PG FTS problem\n(('note:PostgreSQLの全文検索の問題'))

(('tag:center'))
(('tag:margin-bottom * 4'))
Many langs aren't supported\n
(('note:サポートしていない言語がたくさんある'))

  * (('wait'))e.g.: Asian languages\n
    (('note:例：アジアの言語'))
    * Japanese, Chinese and more\n
      (('note:日本語や中国語など'))

= FTS for Japanese1\n(('note:日本語の全文検索1'))

  # coderay sql
  SELECT
    to_tsvector('japanese',
                'こんにちは');
  -- ERROR:  text search configuration
  --         "japanese" does not exist
  -- LINE 2:   to_tsvector('japanese',
  --                       ^

= FTS for Japanese2\n(('note:日本語の全文検索2'))

  # coderay sql
  CREATE EXTENSION pg_trgm;
  SELECT 'こんにちは' % 'にちは';
  --                    ↑substring
  --  ?column? 
  -- ----------
  --  f ← Must be "t"!
  -- (1 row)

= Existing solution\n(('note:既存の解決策'))

(('tag:center'))
pg_bigm

= pg_bigm

  * Similar to pg_trgm\n
    (('note:pg_trgmと似ている'))
    * Operator class for GIN\n
      (('note:GIN用の演算子クラス'))

 # coderay sql
 CREATE INDEX index ON table
   USING gin (column gin_bigm_ops);

= pg_bigm: Demerit\n(('note:pg_bigm：デメリット'))

  * Slow for large document\n
    (('note:文書が長いと遅い'))\n
    (('note:(Normally, we want to use FTS for large document)'))\n
    (('note:（普通は長い文書に対して全文検索したい）'))
    * Because it needs "recheck"\n
      (('note:「recheck」が必要だから'))

= "recheck"

  * "Exact" seq. search after\n
    "loose" index search\n
    (('note:「ゆるい」インデックス検索の後に実行する'))\n
    (('note:「正確な」シーケンシャルサーチ'))
    * (('wait'))The larger text, the slower\n
      (('note:対象テキストが大きければ大きいほど遅くなる'))\n
    * (('wait'))text = doc size * N docs\n
      (('note:対象テキスト = 文書サイズ * 文書数'))

= Benchmark\n(('note:ベンチマーク'))

  # image
  # src = images/search-pg-bigm.pdf
  # relative_height = 100

= New solution\n(('note:新しい解決策'))

  # image
  # src = images/pgroonga-logo.svg
  # relative_width = 100

= PGroonga

  * Pronunciation: píːzí:lúnɡά\n
    (('note:読み方：ぴーじーるんが'))

  * (('wait'))Index and operator classes\n
    (('note:インデックスと演算子クラス'))
    * Not operator classes for GIN\n
      (('note:GINの演算子クラスではない'))

= PGroonga layer

  # image
  # src = images/pgroonga-layer.svg
  # relative_width = 100

= Benchmark\n(('note:ベンチマーク'))

  # image
  # src = images/search-pgroonga-pg-bigm.pdf
  # relative_height = 100

= Wrap up1\n(('note:まとめ1'))

  * PostgreSQL doesn't support Asian languages\n
    (('note:PostgreSQLはアジアの言語をサポートしていない'))

  * pg_bigm and PGroonga support all languages\n
    (('note:pg_bigmとPGroongaはすべての言語をサポートしている'))

= Wrap up2\n(('note:まとめ2'))

  * Many hits case:\n
    (('note:ヒット数が多い場合'))
    * pg_bigm is slow\n
      (('note:pg_bigmは遅い'))
    * PGroonga is fast\n
      (('note:PGroongaは速い'))

= Why is PGroonga fast?\n(('note:PGroongaはどうして速いのか'))

  * Doesn't need "recheck"\n
    (('note:「recheck」が必要ないから'))

  * (('wait'))Is "recheck" really slow?\n
    (('note:本当に「recheck」が遅いの？'))
    * See one more benchmark result\n
      (('note:もう一つベンチマーク結果を見てみましょう'))

= Benchmark\n(('note:ベンチマーク'))

  # image
  # src = images/search-pgroonga-pg-bigm-all.pdf
  # relative_height = 100

= Why is pg_bigm fast?\n(('note:pg_bigmはどうして速いのか'))

  * Query is "日本"\n
    (('note:クエリーは「日本」'))
    * Point: 2 characters\n
      (('note:ポイント：2文字'))
  * (('wait'))pg_bigm doesn't need "recheck" for 2 chars query\n
    (('note:pg_bigmは2文字のクエリーに「recheck」の必要がない'))
    * It means that "recheck" is slow\n
      (('note:つまり「recheck」が遅いということ'))

= N-gram and "recheck"\n(('note:N-gramと「recheck」'))

  * N-gram approach needs "phrase search" when query has N or more characters\n
    (('note:N+1文字以上のクエリーには「フレーズ検索」が必要'))
    * N=2 for pg_bigm, N=3 for pg_trgm\n
      (('note:pg_bigmはN=2でpg_trgmはN=3'))

  * (('wait'))GIN needs "recheck" for "phrase search"\n
    (('note:GINは「フレーズ検索」には「recheck」が必要'))

= Phrase search\n(('note:フレーズ検索'))

  * Phrase search is "token search" and "position check"\n
    (('note:フレーズ検索は「トークン検索」と「位置チェック」'))
    * Tokens must exist and be ordered\n
      (('note:トークンは同じ順序で出現していないといけない'))
    * OK: "car at" for "car at" query
    * NG: "at car" for "car at" query

= N-gram and phrase search

  (1) Split text to tokens\n
      (('note:テキストをトークンに分割'))
      * "cat"→"ca","at"
  (2) ((*Search all tokens*))\n
      (('note:すべてのトークンを検索'))
      * "ca" and "at" exist: Candidate!
  (3) ((*Check appearance pos.*))\n
      (('note:出現位置をチェック'))
      * "ca" then "at": Found!

= N-gram and GIN: Create\n(('note:N-gramとGIN：作成'))

  # image
  # src = images/gin-n-gram-index.svg
  # relative_height = 100

= N-gram and GIN: Search\n(('note:N-gramとGIN：検索'))

  # image
  # src = images/gin-n-gram-search.svg
  # relative_height = 100

= GIN and phrase search\n(('note:GINとフレーズ検索'))

  * Phrase search needs position check\n
    (('note:フレーズ検索では出現位置チェックが必要'))
  * GIN doesn't support position check\n
    (('note:GINは出現位置チェックをサポートしていない'))
    * →GIN needs "recheck"→Slow!\n
      (('note:GINでは「recheck」が必要だから遅い'))

= Why is PGroonga fast?\n(('note:PGroongaはどうして速いのか'))

  * PGroonga uses N-gram (('note:by default'))\n
    (('note:PGroongaはデフォルトでN-gramを使っている'))
  * But doesn't need "recheck"\n
    (('note:PGroongaは「recheck」の必要がない'))

= Why no "recheck"?\n(('note:どうして「recheck」が必要ないのか'))

PGroonga uses\n
((*full*))\n
inverted index\n
(('note:PGroongaは((*完全*))転置インデックスを使っているから'))

= Full inverted index\n(('note:完全転置インデックス'))

Including position\n
(('note:位置情報を含む'))

= Inverted index diff\n(('note:転置インデックスの違い'))

  # image
  # src = images/inverted-index.svg
  # relative_height = 100

= N-gram/PGroonga: Search\n(('note:N-gramとPGroonga：検索'))

  # image
  # src = images/pgroonga-n-gram-search.svg
  # relative_height = 100


